{"version":3,"sources":["img/tv.png","components/Header.jsx","components/Calendar.jsx","components/List.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Header","window","location","pathname","className","href","origin","React","Component","Calendar","props","handleDayClick","bind","onPreviousClick","onNextClick","localeUtils","month","currentMonth","getMonths","getMonth","src","image","onClick","day","yearInFormat","getFullYear","monthInFormat","dateInFormat","getDate","fullDateInFormat","assign","onDayClick","this","navbarElement","Navbar","captionElement","weekdayElement","showOutsideDays","List","changeClick","state","error","isLoaded","items","firstTwoitems","date","match","params","click","fetch","then","res","json","result","setState","slice","formatdates","split","currentyear","currentmonth","currentday","months","map","el","index","numberRemainItems","length","item","key","show","medium","name","premiered","season","number","message","currentDate","showItems","App","exact","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5044c46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tv.0b2f76df.png\";","import React from \"react\";\r\n\r\nexport default class Header extends React.Component {\r\n\r\n    render(){\r\n        if(window.location.pathname != '/') {\r\n            return(\r\n                <div className='header'>\r\n                    <div className='backhome'>\r\n                        <a href= {window.location.origin + '/'}>\r\n                            <i className=\"fas fa-chevron-left\"></i>\r\n                        </a>\r\n                    </div>\r\n                    <div className='header-title'>Super Film</div>\r\n                </div>\r\n            );\r\n        } else {\r\n                return(\r\n                    <div className='header'>\r\n                        <div className='header-title'>Super Film</div>\r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport DayPicker from 'react-day-picker';\r\nimport image from '../img/tv.png';\r\nimport Header from './Header';\r\n\r\n\r\n// Calendar\r\nexport default class Calendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDayClick = this.handleDayClick.bind(this); \r\n  }\r\n\r\n  Navbar({\r\n    onPreviousClick,\r\n    onNextClick,\r\n    className,\r\n    localeUtils,\r\n    month\r\n  }) {\r\n    const months = localeUtils.getMonths(); \r\n    const currentMonth = months[month.getMonth()];\r\n    \r\n    return (\r\n    <>\r\n      <Header />\r\n      <div className ='HiBlock'>\r\n        <img className='HiBlock-img' src={image} />\r\n        <p className='text'>For a list of TV shows, please select the desired month and day.</p>\r\n      </div>\r\n      <div className={className}>        \r\n        <div className='Arow rightrArow' onClick={() => onPreviousClick()}>\r\n          {<i className=\"fas fa-angle-left\"></i>}\r\n        </div>\r\n        <div className='calendarHeader'>{currentMonth}</div>\r\n        <div className='Arow leftrArow' onClick={() => onNextClick()}>\r\n          {<i className=\"fas fa-angle-right\"></i>}\r\n        </div>\r\n      </div>\r\n    </>\r\n    );\r\n  }\r\n\r\n  handleDayClick(day) {\r\n    let yearInFormat = day.getFullYear();\r\n    let monthInFormat = (day.getMonth() < 10 ? '0' : '') + (+day.getMonth()+1);\r\n    let dateInFormat = (day.getDate() < 10 ? '0' : '') + day.getDate();\r\n    let fullDateInFormat = `${yearInFormat}-${monthInFormat}-${dateInFormat}`;\r\n    window.location.assign(window.location.origin + '/list/'+ fullDateInFormat );    \r\n  }\r\n\r\n  render() {   \r\n    return (\r\n      <div>\r\n        <DayPicker \r\n          onDayClick={this.handleDayClick}  \r\n          navbarElement={this.Navbar}  \r\n          captionElement = {<></>}\r\n          weekdayElement =  {<></>}\r\n          showOutsideDays\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport { render } from 'react-dom';\r\nimport Header from \"./Header\";\r\n\r\nexport default class List extends React.Component {\r\n  \r\n  constructor(props) {\r\n      super(props);\r\n      this.changeClick = this.changeClick.bind(this); \r\n      this.state = {\r\n        error: null,\r\n        isLoaded: false,\r\n        items: [],\r\n        firstTwoitems: [],\r\n        date: this.props.match.params.date,\r\n        click: false\r\n      };\r\n    }\r\n  \r\n    componentDidMount() {\r\n     fetch(\"http://api.tvmaze.com/schedule?country=US&date=\" + this.state.date)\r\n        .then(res => res.json())        \r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              items: result,\r\n              firstTwoitems: result.slice(0,2)\r\n            });\r\n\r\n          },\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error\r\n            });\r\n          }\r\n        )\r\n    }\r\n    \r\n    currentDate (){\r\n      let date = this.state.date;\r\n      let formatdates = date.split('-');\r\n      let currentyear = formatdates[0];\r\n      let currentmonth = formatdates[1];\r\n      let currentday = formatdates[2];\r\n\r\n      let months = [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec'\r\n      ].map((el, index) => {\r\n        if((index) == currentmonth-1) return el;\r\n      });\r\n\r\n      return (\r\n      <>\r\n        {currentday} {months} {currentyear}  \r\n      </>\r\n      );\r\n    }\r\n\r\n    changeClick() {\r\n      const { click } = this.state;\r\n      if(!click) {\r\n        this.setState({click: true});\r\n      } else if(click) {\r\n        this.setState({click: false});\r\n      }\r\n    }\r\n\r\n    showItems() {\r\n      const { firstTwoitems, items } = this.state;\r\n      let numberRemainItems = items.length -2;\r\n      if(!this.state.click) {\r\n        return (\r\n          <>\r\n            { \r\n              firstTwoitems.map((item,index) => (           \r\n                <div className=\"item\" key={index}>\r\n                    {item.show.image? <img  className=\"item-image\" src={item.show.image.medium} /> : \r\n                      <img  className=\"item-image\" src=\"http://static.tvmaze.com/uploads/images/medium_portrait/6/15080.jpg\" /> }   \r\n                    <div className=\"item-body\">\r\n                        <div className=\"item-body-header\">\r\n                          <h5 className=\"item-title\">{item.show.name}</h5>\r\n                          <div className=\"item-year\">{item.show.premiered.split('-')[0]}</div>\r\n                        </div>\r\n                        <div className=\"sub-info-item\">\r\n                            <div className=\"sub-info-item-list\">Season: {item.season}</div>\r\n                            <div className=\"sub-info-item-list\">Epizod: {item.number}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>                    \r\n              ))                          \r\n            }\r\n            <div className=\"showitem\">\r\n              <button className='showitemButton' onClick={this.changeClick}>{numberRemainItems} more entries <i className=\"fas fa-chevron-down\"></i></button>\r\n            </div>            \r\n          </>\r\n        );\r\n      } else if(this.state.click) {\r\n        return (\r\n          <>\r\n            { \r\n              items.map((item,index) => (           \r\n                <div className=\"item\" key={index}>\r\n                    {item.show.image? <img  className=\"item-image\" src={item.show.image.medium} /> : \r\n                      <img  className=\"item-image\" src=\"http://static.tvmaze.com/uploads/images/medium_portrait/6/15080.jpg\" /> }   \r\n                    <div className=\"item-body\">\r\n                        <div className=\"item-body-header\">\r\n                          <h5 className=\"item-title\">{item.show.name}</h5>\r\n                          <div className=\"item-year\">{item.show.premiered.split('-')[0]}</div>\r\n                        </div>\r\n                        <div className=\"sub-info-item\">\r\n                            <div className=\"sub-info-item-list\">Season: {item.season}</div>\r\n                            <div className=\"sub-info-item-list\">Epizod: {item.number}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>                    \r\n              ))                          \r\n            }\r\n            <div className=\"showitem\">\r\n              <button className='showitemButton' onClick={this.changeClick}>Show main <i className=\"fas fa-chevron-up\"></i></button>\r\n            </div>\r\n          </>          \r\n        );\r\n      }\r\n    }\r\n\r\n    render() {      \r\n      const { error, isLoaded, items } = this.state;      \r\n      if (error) {\r\n        return <div>Ошибка: {error.message}</div>;\r\n      } else if (!isLoaded) {\r\n        return (\r\n          <>\r\n            <Header />\r\n            <div className='dateBlock'>\r\n                {this.currentDate()}\r\n            </div>\r\n            <div className='main'>Is loading...</div>\r\n          </>\r\n        )\r\n      } else if(items.length == 0) {\r\n        return (\r\n          <>\r\n            <Header />\r\n            <div className='dateBlock'>\r\n              {this.currentDate()}\r\n            </div>\r\n            <div className='noItems'>\r\n              Ops, it seems there are no movies or TV shows on the current date. <br />\r\n              Please choose a different date. \r\n            </div>\r\n          </>\r\n        )\r\n      }else {\r\n        return (\r\n          <> \r\n            <Header />\r\n              <div className='dateBlock'>\r\n                {this.currentDate()}\r\n              </div>\r\n              {this.showItems()}\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n","import React from \"react\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport './App.css';\nimport Calendar from './components/Calendar';\nimport List from './components/List';\n\nexport default class App extends React.Component {\n \n  render(){\n    return (\n      <div className='App'>\n        <div className='main'>\n          <Route exact path=\"/\" component={Calendar}/>\n          <Route exact path=\"/list/:date\" component={List}/>\n        </div>\n      </div>\n    );\n  }\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router,} from \"react-router-dom\";\n\nReactDOM.render(<Router > <App/> </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}